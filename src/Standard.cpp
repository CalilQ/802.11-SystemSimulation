/*
 * Copyright (c) 2002-2015 by Microwave and Wireless Systems Laboratory, by Andre Barreto and Calil Queiroz
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include <iostream>

#include "Standard.h"
#include "Packet.h"
#include "myexception.h"
#include "timestamp.h"
#include "Channel.h"

// Static member variables need to be defined outside the class
dot11_standard Standard::currentStd = dot11;
transmission_mode Standard::maxMCS = MCS;
double Standard::symbol_period = 4e-6;
double Standard::rollof = 0.1875;
channel_bandwidth Standard::maxBand = MHz;
channel_bandwidth Standard::band = MHz;
bool Standard::shortGI = false;
unsigned Standard::numSubcarriers = 52;
unsigned Standard::lengthFFT = 64;

//Indexes
unsigned Standard::sgiIdx = 0;
unsigned Standard::bandIdx = 0;

//Data rates
double Standard::rates_a[8]       =  {    6,    9,   12,   18,   24,   36,   48,   52};
double Standard::rates_n[2][8][2] = {{{ 6.5, 13.5},
		{   13,   27},
		{ 19.5, 40.5},
		{   26,   54},
		{   39,   81},
		{   52,  108},
		{ 58.5,121.5},
		{   65,  135}},

		{{ 7.2,   15},
				{ 14.4,   30},
				{ 21.7,   45},
				{ 28.9,   60},
				{ 43.3,   90},
				{ 57.8,  120},
				{   65,  135},
				{ 72.2,  150}}};

double Standard::rates_ac_ah[2][10][4] = {{{  6.5, 13.5, 29.3, 58.5},
		{   13,   27, 58.5,  117},
		{ 19.5, 40.5, 87.8,175.5},
		{   26,   54,  117,  234},
		{   39,   81,175.5,  351},
		{   52,  108,  234,  468},
		{ 58.5,121.5,263.3,526.5},
		{   65,  135,292.5,  585},
		{   78,  162,  351,  702},
		{    0,  180,  390,  780}},

		{{  7.2,   15, 32.5,   65},
				{ 14.4,   30,   65,  130},
				{ 21.7,   45, 97.5,  195},
				{ 28.9,   60,  130,  260},
				{ 43.3,   90,  195,  390},
				{ 57.8,  120,  260,  520},
				{   65,  135,292.5,  858},
				{ 72.2,  150,  325,  650},
				{ 86.7,  180,  390,  780},
				{    0,  200,433.3,866.7}}};


// Bits per OFDM symbol
unsigned Standard::bits_per_symb_a[8]    	  =  {  24,  36,  48,  72,  96, 144, 192, 216};
unsigned Standard::bits_per_symb_n[8][2] 	  = {{  26,  54},
		{  52, 108},
		{  78, 162},
		{ 104, 216},
		{ 156, 324},
		{ 208, 432},
		{ 234, 486},
		{ 260, 540}};
unsigned Standard::bits_per_symb_ac_ah[10][4] = {{  26,  54, 117, 234},
		{  52, 108, 234, 468},
		{  78, 162, 351, 702},
		{ 104, 216, 468, 936},
		{ 156, 324, 702,1404},
		{ 208, 432, 936,1872},
		{ 234, 486,1053,2106},
		{ 260, 540,1170,2340},
		{ 312, 648,1404,2808},
		{	 0, 720,1560,3120}};

// Standard error model polynomials and beta
//Beta values
double Standard::beta_a[6][8]       =  {{ 1, 1, 1, 1, 1, 1, 1, 1},
		{ 1, 1, 1, 1, 1, 1, 1, 1},
		{ 1, 1, 1, 1, 1, 1, 1, 1},
		{ 1, 1, 1, 1, 1, 1, 1, 1},
		{ 1, 1, 1, 1, 1, 1, 1, 1},
		{ 1, 1, 1, 1, 1, 1, 1, 1}};
double Standard::beta_n[6][2][8][2] = {{{{    1,    1},
		{    1,    1},
		{    1,    1},
		{    1,    1},
		{    1,    1},
		{    1,    1},
		{    1,    1},
		{    1,    1}},

		{{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1}}},

		{{{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1},
				{    1,    1}},

				{{    1,    1},
						{    1,    1},
						{    1,    1},
						{    1,    1},
						{    1,    1},
						{    1,    1},
						{    1,    1},
						{    1,    1}}},

						{{{    1,    1},
								{    1,    1},
								{    1,    1},
								{    1,    1},
								{    1,    1},
								{    1,    1},
								{    1,    1},
								{    1,    1}},

								{{    1,    1},
										{    1,    1},
										{    1,    1},
										{    1,    1},
										{    1,    1},
										{    1,    1},
										{    1,    1},
										{    1,    1}}},

										{{{    1,    1},
												{    1,    1},
												{    1,    1},
												{    1,    1},
												{    1,    1},
												{    1,    1},
												{    1,    1},
												{    1,    1}},

												{{    1,    1},
														{    1,    1},
														{    1,    1},
														{    1,    1},
														{    1,    1},
														{    1,    1},
														{    1,    1},
														{    1,    1}}},

														{{{    1,    1},
																{    1,    1},
																{    1,    1},
																{    1,    1},
																{    1,    1},
																{    1,    1},
																{    1,    1},
																{    1,    1}},

																{{    1,    1},
																		{    1,    1},
																		{    1,    1},
																		{    1,    1},
																		{    1,    1},
																		{    1,    1},
																		{    1,    1},
																		{    1,    1}}},

																		{{{    1,    1},
																				{    1,    1},
																				{    1,    1},
																				{    1,    1},
																				{    1,    1},
																				{    1,    1},
																				{    1,    1},
																				{    1,    1}},

																				{{    1,    1},
																						{    1,    1},
																						{    1,    1},
																						{    1,    1},
																						{    1,    1},
																						{    1,    1},
																						{    1,    1},
																						{    1,    1}}}};

double Standard::beta_ac_ah[6][2][10][4] = {{{{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1},
		{     1,    1,    1,    1}},

		{{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1}}},

		{{{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1},
				{     1,    1,    1,    1}},

				{{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1},
						{     1,    1,    1,    1}}},

						{{{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1},
								{     1,    1,    1,    1}},

								{{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1},
										{     1,    1,    1,    1}}},

										{{{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1},
												{     1,    1,    1,    1}},

												{{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1},
														{     1,    1,    1,    1}}},

														{{{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1},
																{     1,    1,    1,    1}},

																{{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1},
																		{     1,    1,    1,    1}}},

																		{{{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1},
																				{     1,    1,    1,    1}},

																				{{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1},
																						{     1,    1,    1,    1}}}};

// Polynomial coefficients
//802.11a
double Standard::min_thresh_a[8] = {-2.5103, 0.75061,  0.5000,  3.7609, 5.5103, 9.2712 , 12.5206, 14.5321};

double Standard::max_thresh_a[8] = { 1.9897,  5.2506,  5.0000,  8.2609, 10.5103, 14.7712, 18.5206, 20.0321};

double Standard::coeff_a[8][5] = {{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
		{  -0.3624500, -0.2937100,-0.0011057,-0.0408500, 0.0038022},
		{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
		{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
		{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
		{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
		{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
		{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189}};

double Standard::coeff_high_a[8][2] = {  {-2.3974,-1.1580}, { 2.8250,-1.4824}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}};

//802.11n
double Standard::min_thresh_n[2][2][8] = {{{-1.3812,1.6291,4.8900,6.6394,10.9003,14.6497,16.1613,18.1188},
		{-2.5103, 0.5000, 3.7609, 5.5103, 9.2712, 12.5206,14.5321,11.6188}},

		{{-1.4236,1.5867,4.8476,7.0970,10.8579,14.6073,16.1188,18.0764},
				{-2.5103, 0.5000, 3.7609, 5.5103, 9.2712, 12.5206,14.5321,11.6188}}};

double Standard::max_thresh_n[2][2][8] = {{{0.1188,3.1291,7.3900,8.6394,14.4003,16.6497,18.1613,20.1188},
		{0.6188,3.6291,7.8900,9.1394,14.9003,17.1497,18.6613,20.6188}},

		{{0.0764,3.0867,7.3476,8.5970,14.8579,16.6073,18.6188,20.5764},
				{ 1.9897,  5.0000,  8.2609, 10.5103, 14.7712, 18.5206, 20.0321, 21.5000}}};

double Standard::coeff_n[2][2][8][5] = {{{{-1.561150,-1.314819,0.138512,-0.522508,-0.527031},
		{-42.332959,70.157068,-41.786072,10.615457,-0.989957},
		{-365.699073,239.782250,-58.055086,6.155409,-0.242065},
		{-242.361837,111.073197,-18.727728,1.381890,-0.038083},
		{-2024.123362,638.783195,-75.079449,3.896530,-0.075414},
		{-11351.072293,2816.420594,-261.707542,10.797062,-0.166935},
		{12725.553997,-3019.884264,268.202795,-10.563478,0.155650},
		{3693.887007,-852.844214,72.962599,-2.744856,0.038346}},

		{{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
				{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
				{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
				{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
				{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
				{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
				{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189},
				{ -42.9748720, 11.0385340,-1.0249930, 0.0411790,-0.0006080}}},

		{{{-1.562109,-1.597957,-0.027828,-0.046650,-0.194895},
				{10.416337,-20.174948,14.434829,-4.462923,0.484310},
				{-344.940149,225.731520,-54.488612,5.753562,-0.225118},
				{1332.516736,-691.237179,134.016020,-11.497036,0.367703},
				{-1305.040348,409.117389,-47.682882,2.449940,-0.046888},
				{-1029.469074,210.583664,-15.256095,0.448206,-0.004137},
				{-5400.106119,1182.171724,-96.777581,3.513171,-0.047755},
				{-17921.064319,3640.669815,-277.058313,9.362830,-0.118581}},

				{{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
						{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
						{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
						{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
						{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
						{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
						{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189},
						{ -42.9748720, 11.0385340,-1.0249930, 0.0411790,-0.0006080}}}};


double Standard::coeff_high_n[2][2][8][2] = {{{{-1.524752,-1.612916},{3.289422,-1.567140},{7.631991,-1.297084},{10.327883,-1.381805},{5.438555,-0.509616},{19.532708,-1.270710},{9.444797,-0.604589},{13.921861,-0.771285}},
		{{-2.3974,-1.1580}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}, {21.2886,-1.2977}}},

		{{{-1.556262,-1.676965},{0.911387,-0.817926},{3.948996,-0.796423},{6.901874,-0.999115},{7.657165,-0.654718},{14.467281,-0.968252},{18.321364,-1.076478},{26.324169,-1.368689}},
				{{-2.3974,-1.1580}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}, {21.2886,-1.2977}}}};

// 802.11ac and 802.11ah
double Standard::min_thresh_ac_ah[2][4][10] = {{{-1.3812,1.6291,4.8900,6.6394,10.9003,14.6497,16.1613,18.1188,0},
		{-1.2173,1.7930,4.5540,7.3033,11.0643,14.8136,16.8252,17.7827},
		{-2.5103, 0.5000, 3.7609, 5.5103, 9.2712, 12.5206,14.5321,11.6188,15.4106, 15.4106},
		{-0.8696,2.1407,4.9016,7.1510,11.4119,15.1613,16.6728,18.1304}},

		{{-2.5103, 0.5000, 3.7609, 5.5103, 9.2712, 12.5206,14.5321,11.6188,15.4106, 15.4106},
				{-2.5103, 0.5000, 3.7609, 5.5103, 9.2712, 12.5206,14.5321,11.6188,15.4106, 15.4106},
				{-2.5103, 0.5000, 3.7609, 5.5103, 9.2712, 12.5206,14.5321,11.6188,15.4106, 15.4106},
				{-2.5103, 0.5000, 3.7609, 5.5103, 9.2712, 12.5206,14.5321,11.6188,15.4106, 15.4106}}};

double Standard::max_thresh_ac_ah[2][4][10] = {{{-0.3812,3.1291,6.3900,8.6394,12.9003,16.6497,18.6613,20.1188,0},
		{0.2827,3.2930,6.5540,8.8033,13.0643,16.8136,18.8252,20.2827},
		{ 1.9897,  5.0000,  8.2609, 10.5103, 14.7712, 18.5206, 20.0321, 21.5000, 22.5000, 22.5000},
		{0.6304,3.1407,6.9016,9.6510,13.4119,17.1613,18.6728,20.6304}},

		{{ 1.9897,  5.0000,  8.2609, 10.5103, 14.7712, 18.5206, 20.0321, 21.5000, 22.5000, 22.5000},
				{ 1.9897,  5.0000,  8.2609, 10.5103, 14.7712, 18.5206, 20.0321, 21.5000, 22.5000, 22.5000},
				{ 1.9897,  5.0000,  8.2609, 10.5103, 14.7712, 18.5206, 20.0321, 21.5000, 22.5000, 22.5000},
				{ 1.9897,  5.0000,  8.2609, 10.5103, 14.7712, 18.5206, 20.0321, 21.5000, 22.5000, 22.5000}}};

double Standard::coeff_ac_ah[2][4][10][5] = {{{{-1.632573,-1.237867,0.655956,0.000000,-0.370104},
		{-4.060212,4.717670,-1.096468,-0.295798,0.077527},
		{-733.654531,499.117136,-126.355395,14.125438,-0.589967},
		{209.863114,-123.408092,26.646327,-2.501682,0.085970},
		{-4087.705976,1319.952075,-159.365004,8.531615,-0.171037},
		{-10155.375378,2513.185126,-232.880384,9.579475,-0.147655},
		{-11649.502167,2609.532362,-218.891130,8.151041,-0.113736},
		{8002.212948,-1751.698031,143.224153,-5.183652,0.070061},
		{-4171.375872,700.321274,-44.028384,1.229890,-0.012900},
		{0,0,0,0,0}},

		{{-1.252567,-1.237224,0.316115,-0.384126,-0.651098},
				{-44.804433,68.253596,-37.508706,8.840208,-0.770385},
				{-264.908436,181.619529,-46.145642,5.165539,-0.216332},
				{-4025.008237,1940.712317,-349.764818,27.936034,-0.834859},
				{-4093.121465,1314.163154,-157.932455,8.425283,-0.168497},
				{3438.606714,-932.198687,94.045260,-4.185377,0.069330},
				{-35510.764241,7847.158006,-649.668725,23.885298,-0.329080},
				{10219.040307,-2190.146722,175.614569,-6.242691,0.082989},
				{4871.104267,-947.600742,68.264724,-2.161813,0.025421},
				{-6236.398411,889.954627,-46.910447,1.078990,-0.009097}},

				{{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
						{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
						{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
						{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
						{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
						{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
						{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189},
						{ -42.9748720, 11.0385340,-1.0249930, 0.0411790,-0.0006080},
						{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850},
						{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850}},

						{{-0.856744,-1.701604,0.225675,0.741523,-0.567168},
								{0.000000,-7.789662,8.713103,-3.132360,0.354733},
								{-173.876562,108.283582,-24.952763,2.536620,-0.097209},
								{-308.438522,134.946655,-21.908175,1.570922,-0.042343},
								{-7673.642715,2399.969696,-280.842653,14.578056,-0.283356},
								{13561.054066,-3390.159807,317.222627,-13.165476,0.204440},
								{21614.438033,-4917.443895,418.929847,-15.837354,0.224139},
								{6689.932610,-1419.313730,112.540743,-3.951835,0.051836},
								{16914.009801,-2986.576193,197.351788,-5.783360,0.063408},
								{20609.852326,-3398.142994,209.588061,-5.730812,0.058611}}},

		{{{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
				{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
				{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
				{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
				{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
				{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
				{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189},
				{ -42.9748720, 11.0385340,-1.0249930, 0.0411790,-0.0006080},
				{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850},
				{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850}},

				{{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
						{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
						{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
						{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
						{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
						{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
						{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189},
						{ -42.9748720, 11.0385340,-1.0249930, 0.0411790,-0.0006080},
						{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850},
						{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850}},

						{{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
								{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
								{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
								{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
								{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
								{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
								{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189},
								{ -42.9748720, 11.0385340,-1.0249930, 0.0411790,-0.0006080},
								{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850},
								{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850}},

								{{  -2.2353000, -1.0721000,-0.1708900, 0.0243860, 0.0096656},
										{  -0.4517200, -0.3560888, 0.0627930,-0.0651410, 0.0064799},
										{  -0.3082200, -0.2063400, 0.1547100,-0.0389730, 0.0018157},
										{   2.6965000, -1.9353000, 0.4736600,-0.0509360, 0.0016224},
										{  34.8692000,-13.9070000, 2.0328000,-0.1283100, 0.0028499},
										{  93.9622000,-26.7075000, 2.8106000,-0.1290100, 0.0021372},
										{-120.1972000, 26.3772000,-2.1564000, 0.0787190,-0.0011189},
										{ -42.9748720, 11.0385340,-1.0249930, 0.0411790,-0.0006080},
										{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850},
										{ -159.279240, 33.9061380,-2.6679000, 0.0922430,-0.0011850}}}};



double Standard::coeff_high_ac_ah[2][4][10][2] = {{{{-1.604774,-1.394469},{0.879247,-0.812819},{7.792368,-1.487407},{8.522257,-1.179711},{14.495032,-1.269961},{16.695979,-1.099194},{23.518331,-1.355561},{13.010683,-0.727807},{35.185240,-1.544741},{0,0}},
		{{-1.100258,-1.731965},{4.242266,-1.804445},{9.090570,-1.636884},{10.289643,-1.341103},{18.824019,-1.573762},{12.187310,-0.825027},{26.107914,-1.481529},{9.989867,-0.571166},{14.254722,-0.661428},{17.254816,-0.722449}},
		{{-2.3974,-1.1580}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}, {21.2886,-1.2977}, {18.1224,-0.9725}, {18.1224,-0.9725}},
		{{-0.982947,-1.206555},{3.105601,-1.321239},{10.458967,-1.764629},{13.275965,-1.556389},{15.108564,-1.251420},{10.689269,-0.711242},{10.851607,-0.659821},{18.504513,-0.971436},{14.265421,-0.650242},{9.558680,-0.425399}}},

		{{{-2.3974,-1.1580}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}, {21.2886,-1.2977}, {18.1224,-0.9725}, {18.1224,-0.9725}},
				{{-2.3974,-1.1580}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}, {21.2886,-1.2977}, {18.1224,-0.9725}, {18.1224,-0.9725}},
				{{-2.3974,-1.1580}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}, {21.2886,-1.2977}, {18.1224,-0.9725}, {18.1224,-0.9725}},
				{{-2.3974,-1.1580}, { 2.1138,-1.3738}, { 7.7079,-1.5347}, { 9.2576,-1.3244}, {11.3789,-1.1004}, {14.6479,-1.0454}, {20.0742,-1.2278}, {21.2886,-1.2977}, {18.1224,-0.9725}, {18.1224,-0.9725}}}};


//////////////////////////////////
// Standard setters and getters //
//////////////////////////////////
void Standard::set_standard(dot11_standard st, channel_bandwidth bw, bool sgi) {
	currentStd = st;
	band = bw;

	rollof = 0.1875;

	switch(st) {
	case dot11a : {
		maxMCS = MCS7;
		maxBand = MHz20;
		break;
	}
	case dot11n : {
		maxMCS = MCS7;
		maxBand = MHz40;
		break;
	}
	case dot11ac: {
		if(band == MHz20) maxMCS = MCS8;
		else maxMCS = MCS9;
		maxBand = MHz160;
		break;
	}
	case dot11ah: {
		maxMCS = MCS9;
		maxBand = MHz160;
		break;
	}
	default : {
		maxMCS = MCS;
		maxBand = MHz20;
	}
	}

	if(bw > maxBand)throw (my_exception("Bandwidth not supported by standard."));

	switch(bw){
	case MHz20:
		if(currentStd == dot11a)numSubcarriers = 52;
		else numSubcarriers = 56;
		lengthFFT = 64;
		break;
	case MHz40:
		numSubcarriers = 108;
		lengthFFT = 128;
		break;
	case MHz80:
		numSubcarriers = 234;
		lengthFFT = 256;
		break;
	case MHz160:
		numSubcarriers = 468;
		lengthFFT = 512;
		break;
	}

	if(st == dot11ah) symbol_period = 40e-6;
	else symbol_period = 4e-6;

	shortGI = sgi;
	if(shortGI) symbol_period = symbol_period - 0.4e-6;

	sgiIdx = 0;
	if(shortGI) sgiIdx = 1;
	bandIdx = band - MHz20;
}

dot11_standard Standard::get_standard() {
	return currentStd;
}
transmission_mode Standard::get_maxMCS(){
	return maxMCS;
}
double Standard::get_symbol_period(){
	return symbol_period;
}
double Standard::get_min_thresh(int idx) {
	if(currentStd == dot11a) return min_thresh_a[idx];
	else if(currentStd == dot11n) return min_thresh_n[sgiIdx][bandIdx][idx];
	else return min_thresh_ac_ah[sgiIdx][bandIdx][idx];
}
double Standard::get_max_thresh(int idx) {
	if(currentStd == dot11a) return max_thresh_a[idx];
	else if(currentStd == dot11n) return max_thresh_n[sgiIdx][bandIdx][idx];
	else return max_thresh_ac_ah[sgiIdx][bandIdx][idx];
}
double Standard::get_coeff(int idx, int i) {
	if(currentStd == dot11a) return coeff_a[idx][i];
	else if(currentStd == dot11n) return coeff_n[sgiIdx][bandIdx][idx][i];
	else return coeff_ac_ah[sgiIdx][bandIdx][idx][i];
}
double Standard::get_coeff_high(int idx, int i) {
	if(currentStd == dot11a) return coeff_high_a[idx][i];
	else if(currentStd == dot11n) return coeff_high_n[sgiIdx][bandIdx][idx][i];
	else return coeff_high_ac_ah[sgiIdx][bandIdx][idx][i];
}
channel_bandwidth Standard::get_band() {
	return band;
}
double Standard::get_band_double(){
	switch(band) {
	case MHz20: return 20e6;
	case MHz40: return 40e6;
	case MHz80: return 80e6;
	case MHz160:return 160e6;
	default: return 0;
	}
}
double Standard::get_rollof() {
	return rollof;
}
channel_bandwidth Standard::get_maxBand() {
	return maxBand;
}
unsigned Standard::get_numSubcarriers()	{
	return numSubcarriers;
}
unsigned Standard::get_lengthFFT(){
	return lengthFFT;
}
double Standard::get_beta(transmission_mode tm, channel_model cm) {

	unsigned mcsIdx = tm - MCS0;
	unsigned cmIdx = cm - A;

	switch(currentStd) {
	case dot11a : return beta_a[cmIdx][mcsIdx];
	case dot11n : return beta_n[cmIdx][sgiIdx][mcsIdx][bandIdx];
	case dot11ac: return beta_ac_ah[cmIdx][sgiIdx][mcsIdx][bandIdx];
	case dot11ah: return beta_ac_ah[cmIdx][sgiIdx][mcsIdx][bandIdx];
	default: return 0.0;
	}
}

///////////////////////
// tx_mode_to_double //
///////////////////////
double Standard::tx_mode_to_double (transmission_mode tm) {

	unsigned mode = tm - MCS0;

	switch(currentStd) {
	case dot11a:  return rates_a[mode];
	case dot11n:  return rates_n[sgiIdx][mode][bandIdx];
	case dot11ac: return rates_ac_ah[sgiIdx][mode][bandIdx];
	case dot11ah: return rates_ac_ah[sgiIdx][mode][bandIdx];
	default: throw (my_exception("Undefined Standard."));
	}
	return 0;
}

////////////////////////////
// txMode_bits_per_symbol //
////////////////////////////
unsigned Standard::txMode_bits_per_symbol(transmission_mode tm) {

	unsigned mode = tm - MCS0;

	switch(currentStd) {
	case dot11a:  return bits_per_symb_a[mode];
	case dot11n:  return bits_per_symb_n[mode][bandIdx];
	case dot11ac: return bits_per_symb_ac_ah[mode][bandIdx];
	case dot11ah: return bits_per_symb_ac_ah[mode][bandIdx];
	default: throw (my_exception("Undefined Standard."));
	}
	return 0;
}

////////////////////////
// output operator<<  //
////////////////////////
ostream& operator<< (ostream& os, const dot11_standard& st) {
	switch(st) {
	case dot11a : return os << "802.11a";
	case dot11n : return os << "802.11n";
	case dot11ac: return os << "802.11ac";
	case dot11ah: return os << "802.11ah";
	case dot11  : return os << "dummy standard";
	default: return os << "unknown standard.";
	}
}

///////////////////////
// input operator >> //
///////////////////////
istream& operator>> (istream& is, dot11_standard& st) {
	string str;
	is >> str;

	if (str == "802.11a") st = dot11a;
	else if (str == "802.11n") st = dot11n;
	else if (str == "802.11ac") st = dot11ac;
	else if (str == "802.11ah") st = dot11ah;
	else is.clear(ios::failbit);

	return is;
}

////////////////////////
// output operator<<  //
////////////////////////
ostream& operator<< (ostream& os, const channel_bandwidth& bw) {
	switch(bw) {
	case MHz : return os << "MHz";
	case MHz20 : return os << "20 MHz";
	case MHz40 : return os << "40 MHz";
	case MHz80 : return os << "80 MHz";
	case MHz160: return os << "160 MHz";
	default: return os << "unknown bandwidth.";
	}
}

///////////////////////
// input operator >> //
///////////////////////
istream& operator>> (istream& is, channel_bandwidth& bw) {
	string str;
	is >> str;

	if (str == "20MHz") bw = MHz20;
	else if (str == "40MHz") bw = MHz40;
	else if (str == "80MHz") bw = MHz80;
	else if (str == "160MHz") bw = MHz160;
	else is.clear(ios::failbit);

	return is;
}

